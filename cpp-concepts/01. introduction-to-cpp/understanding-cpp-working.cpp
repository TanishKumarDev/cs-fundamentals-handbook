#include <iostream>
using namespace std;

int main() {
    cout << "Hello World!";
    return 0;
}
/*
ðŸ”¹ Step 1: Save the file

Save it as program.cpp.

ðŸ”¹ Step 2: Compile the code

Now you need a compiler.

In Windows â†’ g++ (comes with MinGW or CodeBlocks).

In Linux/Mac â†’ already installed (g++).

Command (Terminal / CMD):

g++ program.cpp -o program.exe


ðŸ‘‰ Here:

g++ = GNU C++ compiler

program.cpp = your source code

-o program.exe = output file (executable)

ðŸ”¹ Step 3: Run the executable

Now run the output file:

On Windows:

program.exe


On Linux/Mac:

./program


ðŸ‘‰ Output:

Hello World!

ðŸ”¹ What happens inside the compiler (behind the scenes)?

When you typed g++ program.cpp -o program.exe, actually 4 phases happen:

Preprocessing

Handles #include, #define, macros.

Example: #include <iostream> is expanded to actual library code.

Command to see:

g++ -E program.cpp -o program.i


Compilation

Converts .i file â†’ Assembly code (.s).

Assembly = human-readable low-level instructions.

Command:

g++ -S program.i -o program.s


Assembly

Assembler converts .s â†’ Object code (.o).

This is machine instructions but still incomplete (not linked with libraries).

Command:

g++ -c program.s -o program.o


Linking

Links your .o file with library files (like iostream functions).

Produces final .exe (Windows) or binary (Linux/Mac).

Command:

g++ program.o -o program.exe

ðŸ”¹ Final Recap

Write code â†’ program.cpp

Preprocessor expands macros â†’ program.i

Compiler translates to assembly â†’ program.s

Assembler makes object file â†’ program.o

Linker combines everything â†’ program.exe

Run the exe â†’ Output shown ðŸŽ‰
*/